FORMAT: X-1A

# Holograph API 

API designed to keep track of cases and their graphs for hololens use

# Group Cases

# Cases collection [/v1/cases]

## Create a Case [POST]
+ Request (application/json)

    {
      "name": "case name",
      "description": "optional case description"
    }

+ Response 201 (application/json)
        
    {
      "_id": "case id",
      "name": "case name",
      "description": "optional case description"
    }

## Retreive all Cases [GET]

+ Response 200 (application/json)

    [{
      "_id": "case id",
      "name": "case name",
      "description": "optional case description"
    }]

# Case [/v1/cases/{caseId}]
+ Parameters
  + caseId (required,`1234`)


## Retrieve a Case [GET]
+ Response 200 (application/json)

    {
      "_id": "case id",
      "name": "case name",
      "description": "optional case description"
    }

## Update a Case [PUT]
+ Request (application/json)
  + Body
      {
        "_id": "case id",
        "name": "case name",
        "description": "optional case description"
      }

+ Response 204

# Group Vertices

# Vertex collection [/v1/cases/{caseId}/vertices]
+ Parameters
  + caseId (required,`1234`)


## Create vertex [POST]
+ Request (application/json)

    {
       "name": "vertex name",
       "type": "vertex type"
    }

+ Response 201 (application/json)

    {
      "_id": "vertex id",
      "name": "vertex name",
      "type": "vertex type"
    }

## Retrive all vertices [GET]
+ Response 200 (application/json)

    [
      {
        "_id": "vertex id",
        "name": "vertex name",
        "type": "vertex type"
      }
    ]

# Vertex [/v1/cases/{caseId}/vertices/{vertexId}]
+ Parameters
  + caseId (required,`1`)
  + vertexId (required,`1`)

## Retrive a vertex [GET]
+ Response 200 (application/json)

    {
      "_id": "vertex id",
      "name": "vertex name",
      "type": "vertex type"
    }

## Update a vertex [PUT]
+ Request (application/json)

    {
      "name": "updated optional vertex name",
      "type": "updated optional type"
    }

+ Response 204

# Group Edges

# Edge collection [/v1/cases/{caseId}/edges]
+ Parameters
  + caseId (required,`1`)

## Create an Edge [POST]
+ Request (application/json)

    {
      "source": "source vertexId",
      "target": "target vertexId"
    }

+ Response 201 (application/json)

    {
      "_id": "edge id",
      "source": "source vertexId",
      "target": "target vertexId"
    }

## Retrive all edges [GET]
+ Response 200 (application/json)

    [
      {
        "_id": "edge id",
        "source": "source vertexId",
        "target": "target vertexId"
      }
    ]

# Edge [/v1/cases/{caseId}/edges/{edgeId}]
+ Parameters
  + caseId (required,`1`)
  + edgeId (required,`1`)

## Retrive an edge [GET]
+ Response 200 (application/json)

    {
      "_id": "edge id",
      "source": "source vertexId",
      "target": "target vertexId"
    }

## Update an edge [PUT]
+ Request (application/json)

    {  
      "source": "updated source vertexId",
      "target": "updated target vertexId"
    }

+ Response 204